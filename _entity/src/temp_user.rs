//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use chrono::{Duration, Timelike, Utc};
use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "temp_user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub google_id: String,
    #[sea_orm(unique)]
    pub email: String,
    pub avatar_url: String,
    pub name: String,
    pub first_name: String,
    pub last_name: String,
    pub locale: String,
    pub created_at: DateTimeUtc,
    pub expires_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Serialize, Deserialize)]
pub struct NewModel {
    pub google_id: String,
    pub email: String,
    pub avatar_url: String,
    pub name: String,
    pub first_name: String,
    pub last_name: String,
    pub locale: String,
}

impl From<NewModel> for ActiveModel {
    fn from(m: NewModel) -> Self {
        let now = Utc::now();

        Self {
            id: Set(Uuid::new_v4()),
            google_id: Set(m.google_id),
            email: Set(m.email),
            avatar_url: Set(m.avatar_url),
            name: Set(m.name),
            first_name: Set(m.first_name),
            last_name: Set(m.last_name),
            locale: Set(m.locale),
            created_at: Set(now),
            expires_at: Set(now + Duration::minutes(10)),
        }
    }
}
